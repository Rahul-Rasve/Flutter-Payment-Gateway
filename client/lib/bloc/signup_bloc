import 'package:bloc/bloc.dart';
import 'package:client/api/api_client.dart';
import 'package:client/models/api_response.dart';
import 'package:equatable/equatable.dart';

//-------------------EVENTS
abstract class SignUpEvent extends Equatable{
  const SignUpEvent();

  @override
  List<Object> get props => [];
}

class SignUpButtonPressed extends SignUpEvent {
  final String name;
  final String email;
  final String password;

  const SignUpButtonPressed({
    required String name,
    required this.email,
    required this.password,
  });
}

//-------------------STATES
abstract class SignUpState extends Equatable {
  const SignUpState();

  @override
  List<Object> get props => [];
}

class SignUpInitial extends SignUpState {}

class SignUpLoading extends SignUpState {}

class SignUpSuccess extends SignUpState {}

class SignUpFailure extends SignUpState {
  final String error;

  const SignUpFailure({required this.error});

  @override
  List<Object> get props => [error];
}

//-------------------BLOC
class SignUpBloc extends Bloc<SignUpEvent, SignUpState> {
  SignUpBloc() : super(SignUpInitial());

  final ApiClient api = ApiClient();

  Stream<SignUpState> mapEventToState(SignUpEvent event) async* {
    if (event is SignUpButtonPressed) {
      yield SignUpLoading();
      try {
        final ApiResponse reponse =
            await api.SignUpUser(event,name, event.email, event.password);
        if (reponse.resultStatus == ResultStatus.success) {
          yield SignUpSuccess();
          Navigator.pop(context);
        }
        yield SignUpFailure(error: reponse.message);
      } catch (e) {
        yield SignUpFailure(error: e.toString());
      }
    }
  }
}
